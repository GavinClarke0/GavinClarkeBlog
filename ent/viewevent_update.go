// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Blog/ent/predicate"
	"Blog/ent/viewevent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ViewEventUpdate is the builder for updating ViewEvent entities.
type ViewEventUpdate struct {
	config
	hooks    []Hook
	mutation *ViewEventMutation
}

// Where appends a list predicates to the ViewEventUpdate builder.
func (veu *ViewEventUpdate) Where(ps ...predicate.ViewEvent) *ViewEventUpdate {
	veu.mutation.Where(ps...)
	return veu
}

// SetPage sets the "page" field.
func (veu *ViewEventUpdate) SetPage(s string) *ViewEventUpdate {
	veu.mutation.SetPage(s)
	return veu
}

// SetIPAddress sets the "ip_address" field.
func (veu *ViewEventUpdate) SetIPAddress(s string) *ViewEventUpdate {
	veu.mutation.SetIPAddress(s)
	return veu
}

// SetEventTime sets the "event_time" field.
func (veu *ViewEventUpdate) SetEventTime(t time.Time) *ViewEventUpdate {
	veu.mutation.SetEventTime(t)
	return veu
}

// Mutation returns the ViewEventMutation object of the builder.
func (veu *ViewEventUpdate) Mutation() *ViewEventMutation {
	return veu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (veu *ViewEventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(veu.hooks) == 0 {
		affected, err = veu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			veu.mutation = mutation
			affected, err = veu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(veu.hooks) - 1; i >= 0; i-- {
			if veu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = veu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, veu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (veu *ViewEventUpdate) SaveX(ctx context.Context) int {
	affected, err := veu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (veu *ViewEventUpdate) Exec(ctx context.Context) error {
	_, err := veu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veu *ViewEventUpdate) ExecX(ctx context.Context) {
	if err := veu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (veu *ViewEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   viewevent.Table,
			Columns: viewevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: viewevent.FieldID,
			},
		},
	}
	if ps := veu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := veu.mutation.Page(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewevent.FieldPage,
		})
	}
	if value, ok := veu.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewevent.FieldIPAddress,
		})
	}
	if value, ok := veu.mutation.EventTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: viewevent.FieldEventTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, veu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ViewEventUpdateOne is the builder for updating a single ViewEvent entity.
type ViewEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ViewEventMutation
}

// SetPage sets the "page" field.
func (veuo *ViewEventUpdateOne) SetPage(s string) *ViewEventUpdateOne {
	veuo.mutation.SetPage(s)
	return veuo
}

// SetIPAddress sets the "ip_address" field.
func (veuo *ViewEventUpdateOne) SetIPAddress(s string) *ViewEventUpdateOne {
	veuo.mutation.SetIPAddress(s)
	return veuo
}

// SetEventTime sets the "event_time" field.
func (veuo *ViewEventUpdateOne) SetEventTime(t time.Time) *ViewEventUpdateOne {
	veuo.mutation.SetEventTime(t)
	return veuo
}

// Mutation returns the ViewEventMutation object of the builder.
func (veuo *ViewEventUpdateOne) Mutation() *ViewEventMutation {
	return veuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (veuo *ViewEventUpdateOne) Select(field string, fields ...string) *ViewEventUpdateOne {
	veuo.fields = append([]string{field}, fields...)
	return veuo
}

// Save executes the query and returns the updated ViewEvent entity.
func (veuo *ViewEventUpdateOne) Save(ctx context.Context) (*ViewEvent, error) {
	var (
		err  error
		node *ViewEvent
	)
	if len(veuo.hooks) == 0 {
		node, err = veuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			veuo.mutation = mutation
			node, err = veuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(veuo.hooks) - 1; i >= 0; i-- {
			if veuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = veuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, veuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (veuo *ViewEventUpdateOne) SaveX(ctx context.Context) *ViewEvent {
	node, err := veuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (veuo *ViewEventUpdateOne) Exec(ctx context.Context) error {
	_, err := veuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veuo *ViewEventUpdateOne) ExecX(ctx context.Context) {
	if err := veuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (veuo *ViewEventUpdateOne) sqlSave(ctx context.Context) (_node *ViewEvent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   viewevent.Table,
			Columns: viewevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: viewevent.FieldID,
			},
		},
	}
	id, ok := veuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ViewEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := veuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, viewevent.FieldID)
		for _, f := range fields {
			if !viewevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != viewevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := veuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := veuo.mutation.Page(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewevent.FieldPage,
		})
	}
	if value, ok := veuo.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewevent.FieldIPAddress,
		})
	}
	if value, ok := veuo.mutation.EventTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: viewevent.FieldEventTime,
		})
	}
	_node = &ViewEvent{config: veuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, veuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
