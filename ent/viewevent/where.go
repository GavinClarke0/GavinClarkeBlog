// Code generated by entc, DO NOT EDIT.

package viewevent

import (
	"Blog/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Page applies equality check predicate on the "page" field. It's identical to PageEQ.
func Page(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPage), v))
	})
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIPAddress), v))
	})
}

// EventTime applies equality check predicate on the "event_time" field. It's identical to EventTimeEQ.
func EventTime(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventTime), v))
	})
}

// PageEQ applies the EQ predicate on the "page" field.
func PageEQ(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPage), v))
	})
}

// PageNEQ applies the NEQ predicate on the "page" field.
func PageNEQ(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPage), v))
	})
}

// PageIn applies the In predicate on the "page" field.
func PageIn(vs ...string) predicate.ViewEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPage), v...))
	})
}

// PageNotIn applies the NotIn predicate on the "page" field.
func PageNotIn(vs ...string) predicate.ViewEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPage), v...))
	})
}

// PageGT applies the GT predicate on the "page" field.
func PageGT(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPage), v))
	})
}

// PageGTE applies the GTE predicate on the "page" field.
func PageGTE(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPage), v))
	})
}

// PageLT applies the LT predicate on the "page" field.
func PageLT(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPage), v))
	})
}

// PageLTE applies the LTE predicate on the "page" field.
func PageLTE(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPage), v))
	})
}

// PageContains applies the Contains predicate on the "page" field.
func PageContains(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPage), v))
	})
}

// PageHasPrefix applies the HasPrefix predicate on the "page" field.
func PageHasPrefix(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPage), v))
	})
}

// PageHasSuffix applies the HasSuffix predicate on the "page" field.
func PageHasSuffix(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPage), v))
	})
}

// PageEqualFold applies the EqualFold predicate on the "page" field.
func PageEqualFold(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPage), v))
	})
}

// PageContainsFold applies the ContainsFold predicate on the "page" field.
func PageContainsFold(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPage), v))
	})
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIPAddress), v))
	})
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIPAddress), v))
	})
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ViewEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIPAddress), v...))
	})
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ViewEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIPAddress), v...))
	})
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIPAddress), v))
	})
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIPAddress), v))
	})
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIPAddress), v))
	})
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIPAddress), v))
	})
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIPAddress), v))
	})
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIPAddress), v))
	})
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIPAddress), v))
	})
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIPAddress), v))
	})
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIPAddress), v))
	})
}

// EventTimeEQ applies the EQ predicate on the "event_time" field.
func EventTimeEQ(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventTime), v))
	})
}

// EventTimeNEQ applies the NEQ predicate on the "event_time" field.
func EventTimeNEQ(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventTime), v))
	})
}

// EventTimeIn applies the In predicate on the "event_time" field.
func EventTimeIn(vs ...time.Time) predicate.ViewEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventTime), v...))
	})
}

// EventTimeNotIn applies the NotIn predicate on the "event_time" field.
func EventTimeNotIn(vs ...time.Time) predicate.ViewEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ViewEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventTime), v...))
	})
}

// EventTimeGT applies the GT predicate on the "event_time" field.
func EventTimeGT(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventTime), v))
	})
}

// EventTimeGTE applies the GTE predicate on the "event_time" field.
func EventTimeGTE(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventTime), v))
	})
}

// EventTimeLT applies the LT predicate on the "event_time" field.
func EventTimeLT(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventTime), v))
	})
}

// EventTimeLTE applies the LTE predicate on the "event_time" field.
func EventTimeLTE(v time.Time) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ViewEvent) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ViewEvent) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ViewEvent) predicate.ViewEvent {
	return predicate.ViewEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
